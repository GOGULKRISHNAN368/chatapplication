{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Gogul\\\\OneDrive\\\\Desktop\\\\chat-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Auth from './components/Auth';\nimport Sidebar from './components/Sidebar';\nimport ChatWindow from './components/ChatWindow';\nimport { AddContactModal, CreateGroupModal } from './components/Modals';\nimport { userAPI, groupAPI } from './services/api';\nimport socketService from './services/socket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [contacts, setContacts] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [messages, setMessages] = useState({});\n  const [isTyping, setIsTyping] = useState({});\n  const [onlineUsers, setOnlineUsers] = useState({});\n  const [replyTo, setReplyTo] = useState(null);\n  const [editingMessage, setEditingMessage] = useState(null);\n  const [showAddContact, setShowAddContact] = useState(false);\n  const [showGroupModal, setShowGroupModal] = useState(false);\n  const [showSidebar, setShowSidebar] = useState(true);\n\n  // Check for existing session\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    if (storedToken && storedUser) {\n      setToken(storedToken);\n      setCurrentUser(JSON.parse(storedUser));\n    }\n  }, []);\n\n  // Initialize socket and fetch data when user logs in\n  useEffect(() => {\n    if (currentUser && token) {\n      initializeApp();\n    }\n    return () => {\n      if (socketService.isConnected()) {\n        socketService.disconnect();\n      }\n    };\n  }, [currentUser, token]);\n  const initializeApp = async () => {\n    // Connect to socket\n    socketService.connect(currentUser.id, token);\n\n    // Fetch contacts and groups\n    await fetchContacts();\n    await fetchGroups();\n\n    // Setup socket listeners\n    setupSocketListeners();\n  };\n  const fetchContacts = async () => {\n    try {\n      const response = await userAPI.getContacts();\n      setContacts(response.data.map(c => ({\n        id: c._id,\n        name: c.name,\n        uniqueId: c.uniqueId,\n        isOnline: c.isOnline,\n        lastSeen: c.lastSeen,\n        isGroup: false\n      })));\n    } catch (error) {\n      console.error('Failed to fetch contacts:', error);\n    }\n  };\n  const fetchGroups = async () => {\n    try {\n      const response = await groupAPI.getGroups();\n      setGroups(response.data.map(g => ({\n        id: g._id,\n        name: g.name,\n        uniqueId: g.uniqueId,\n        members: g.members,\n        isGroup: true\n      })));\n    } catch (error) {\n      console.error('Failed to fetch groups:', error);\n    }\n  };\n  const setupSocketListeners = () => {\n    socketService.onMessageReceived(msg => {\n      const contactId = msg.recipientId || msg.groupId;\n      setMessages(prev => ({\n        ...prev,\n        [contactId]: [...(prev[contactId] || []), formatMessage(msg)]\n      }));\n    });\n    socketService.onMessageSent(msg => {\n      const contactId = msg.recipientId || msg.groupId;\n      setMessages(prev => ({\n        ...prev,\n        [contactId]: [...(prev[contactId] || []), formatMessage(msg)]\n      }));\n    });\n    socketService.onMessageStatusUpdate(({\n      messageId,\n      status\n    }) => {\n      setMessages(prev => {\n        const updated = {\n          ...prev\n        };\n        Object.keys(updated).forEach(contactId => {\n          updated[contactId] = updated[contactId].map(msg => msg.id === messageId ? {\n            ...msg,\n            status\n          } : msg);\n        });\n        return updated;\n      });\n    });\n    socketService.onUserTyping(({\n      userId,\n      isTyping: typing\n    }) => {\n      setIsTyping(prev => ({\n        ...prev,\n        [userId]: typing\n      }));\n    });\n    socketService.onUserStatusChanged(({\n      userId,\n      isOnline,\n      lastSeen\n    }) => {\n      setOnlineUsers(prev => ({\n        ...prev,\n        [userId]: isOnline\n      }));\n      setContacts(prev => prev.map(c => c.id === userId ? {\n        ...c,\n        isOnline,\n        lastSeen\n      } : c));\n    });\n  };\n  const formatMessage = msg => ({\n    id: msg._id,\n    senderId: msg.senderId,\n    recipientId: msg.recipientId,\n    groupId: msg.groupId,\n    text: msg.text,\n    timestamp: msg.timestamp,\n    status: msg.status,\n    replyTo: msg.replyTo,\n    edited: msg.edited,\n    deleted: msg.deleted,\n    deletedForEveryone: msg.deletedForEveryone\n  });\n  const handleAuthSuccess = (user, authToken) => {\n    setCurrentUser(user);\n    setToken(authToken);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    socketService.disconnect();\n    setCurrentUser(null);\n    setToken(null);\n    setContacts([]);\n    setGroups([]);\n    setMessages({});\n  };\n  const handleSelectContact = async contact => {\n    setSelectedContact(contact);\n\n    // Fetch messages for this contact\n    if (!messages[contact.id]) {\n      try {\n        const endpoint = contact.isGroup ? `/messages/group/${contact.id}` : `/messages/${contact.id}`;\n        const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api${endpoint}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        setMessages(prev => ({\n          ...prev,\n          [contact.id]: data.map(formatMessage)\n        }));\n      } catch (error) {\n        console.error('Failed to fetch messages:', error);\n      }\n    }\n  };\n  const handleSendMessage = (text, replyToId, editId) => {\n    if (!selectedContact) return;\n    const messageData = {\n      senderId: currentUser.id,\n      text,\n      replyTo: replyToId\n    };\n    if (selectedContact.isGroup) {\n      messageData.groupId = selectedContact.id;\n    } else {\n      messageData.recipientId = selectedContact.id;\n    }\n    socketService.sendMessage(messageData);\n\n    // Send typing indicator stopped\n    if (!selectedContact.isGroup) {\n      socketService.sendTypingIndicator(selectedContact.id, currentUser.id, false);\n    }\n  };\n  const handleAddContact = async uniqueId => {\n    try {\n      await userAPI.addContact(uniqueId);\n      await fetchContacts();\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to add contact');\n    }\n  };\n  const handleCreateGroup = async (name, memberIds) => {\n    try {\n      await groupAPI.createGroup({\n        name,\n        members: memberIds\n      });\n      await fetchGroups();\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to create group');\n    }\n  };\n  const handleReply = message => {\n    setReplyTo(message);\n  };\n  const handleEdit = message => {\n    setEditingMessage(message);\n  };\n  const handleDelete = (messageId, deleteForEveryone) => {\n    // Implement delete logic with socket\n    setMessages(prev => ({\n      ...prev,\n      [selectedContact.id]: prev[selectedContact.id].map(msg => msg.id === messageId ? {\n        ...msg,\n        deleted: true,\n        deletedForEveryone: deleteForEveryone\n      } : msg)\n    }));\n  };\n  const allContacts = [...contacts, ...groups];\n  if (!currentUser) {\n    return /*#__PURE__*/_jsxDEV(Auth, {\n      onAuthSuccess: handleAuthSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen bg-gray-100\",\n    children: [showSidebar && /*#__PURE__*/_jsxDEV(Sidebar, {\n      currentUser: currentUser,\n      contacts: allContacts,\n      selectedContact: selectedContact,\n      onSelectContact: handleSelectContact,\n      onLogout: handleLogout,\n      onAddContact: () => setShowAddContact(true),\n      onCreateGroup: () => setShowGroupModal(true),\n      onlineUsers: onlineUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n      selectedContact: selectedContact,\n      currentUser: currentUser,\n      messages: messages[selectedContact === null || selectedContact === void 0 ? void 0 : selectedContact.id] || [],\n      onSendMessage: handleSendMessage,\n      onReply: handleReply,\n      onEdit: handleEdit,\n      onDelete: handleDelete,\n      replyTo: replyTo,\n      onCancelReply: () => setReplyTo(null),\n      editingMessage: editingMessage,\n      onCancelEdit: () => setEditingMessage(null),\n      isTyping: isTyping,\n      onlineUsers: onlineUsers,\n      onToggleSidebar: () => setShowSidebar(!showSidebar)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddContactModal, {\n      show: showAddContact,\n      onClose: () => setShowAddContact(false),\n      onAddContact: handleAddContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateGroupModal, {\n      show: showGroupModal,\n      onClose: () => setShowGroupModal(false),\n      onCreateGroup: handleCreateGroup,\n      contacts: contacts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"k9wHFI5PtJZyRlGC0YT5xhhGoxA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Auth","Sidebar","ChatWindow","AddContactModal","CreateGroupModal","userAPI","groupAPI","socketService","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","token","setToken","contacts","setContacts","groups","setGroups","selectedContact","setSelectedContact","messages","setMessages","isTyping","setIsTyping","onlineUsers","setOnlineUsers","replyTo","setReplyTo","editingMessage","setEditingMessage","showAddContact","setShowAddContact","showGroupModal","setShowGroupModal","showSidebar","setShowSidebar","storedToken","localStorage","getItem","storedUser","JSON","parse","initializeApp","isConnected","disconnect","connect","id","fetchContacts","fetchGroups","setupSocketListeners","response","getContacts","data","map","c","_id","name","uniqueId","isOnline","lastSeen","isGroup","error","console","getGroups","g","members","onMessageReceived","msg","contactId","recipientId","groupId","prev","formatMessage","onMessageSent","onMessageStatusUpdate","messageId","status","updated","Object","keys","forEach","onUserTyping","userId","typing","onUserStatusChanged","senderId","text","timestamp","edited","deleted","deletedForEveryone","handleAuthSuccess","user","authToken","handleLogout","removeItem","handleSelectContact","contact","endpoint","fetch","process","env","REACT_APP_API_URL","headers","json","handleSendMessage","replyToId","editId","messageData","sendMessage","sendTypingIndicator","handleAddContact","addContact","_error$response","_error$response$data","Error","message","handleCreateGroup","memberIds","createGroup","_error$response2","_error$response2$data","handleReply","handleEdit","handleDelete","deleteForEveryone","allContacts","onAuthSuccess","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onSelectContact","onLogout","onAddContact","onCreateGroup","onSendMessage","onReply","onEdit","onDelete","onCancelReply","onCancelEdit","onToggleSidebar","show","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Gogul/OneDrive/Desktop/chat-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Auth from './components/Auth';\r\nimport Sidebar from './components/Sidebar';\r\nimport ChatWindow from './components/ChatWindow';\r\nimport { AddContactModal, CreateGroupModal } from './components/Modals';\r\nimport { userAPI, groupAPI } from './services/api';\r\nimport socketService from './services/socket';\r\n\r\nfunction App() {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [contacts, setContacts] = useState([]);\r\n  const [groups, setGroups] = useState([]);\r\n  const [selectedContact, setSelectedContact] = useState(null);\r\n  const [messages, setMessages] = useState({});\r\n  const [isTyping, setIsTyping] = useState({});\r\n  const [onlineUsers, setOnlineUsers] = useState({});\r\n  const [replyTo, setReplyTo] = useState(null);\r\n  const [editingMessage, setEditingMessage] = useState(null);\r\n  const [showAddContact, setShowAddContact] = useState(false);\r\n  const [showGroupModal, setShowGroupModal] = useState(false);\r\n  const [showSidebar, setShowSidebar] = useState(true);\r\n\r\n  // Check for existing session\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedUser = localStorage.getItem('user');\r\n    \r\n    if (storedToken && storedUser) {\r\n      setToken(storedToken);\r\n      setCurrentUser(JSON.parse(storedUser));\r\n    }\r\n  }, []);\r\n\r\n  // Initialize socket and fetch data when user logs in\r\n  useEffect(() => {\r\n    if (currentUser && token) {\r\n      initializeApp();\r\n    }\r\n\r\n    return () => {\r\n      if (socketService.isConnected()) {\r\n        socketService.disconnect();\r\n      }\r\n    };\r\n  }, [currentUser, token]);\r\n\r\n  const initializeApp = async () => {\r\n    // Connect to socket\r\n    socketService.connect(currentUser.id, token);\r\n\r\n    // Fetch contacts and groups\r\n    await fetchContacts();\r\n    await fetchGroups();\r\n\r\n    // Setup socket listeners\r\n    setupSocketListeners();\r\n  };\r\n\r\n  const fetchContacts = async () => {\r\n    try {\r\n      const response = await userAPI.getContacts();\r\n      setContacts(response.data.map(c => ({\r\n        id: c._id,\r\n        name: c.name,\r\n        uniqueId: c.uniqueId,\r\n        isOnline: c.isOnline,\r\n        lastSeen: c.lastSeen,\r\n        isGroup: false\r\n      })));\r\n    } catch (error) {\r\n      console.error('Failed to fetch contacts:', error);\r\n    }\r\n  };\r\n\r\n  const fetchGroups = async () => {\r\n    try {\r\n      const response = await groupAPI.getGroups();\r\n      setGroups(response.data.map(g => ({\r\n        id: g._id,\r\n        name: g.name,\r\n        uniqueId: g.uniqueId,\r\n        members: g.members,\r\n        isGroup: true\r\n      })));\r\n    } catch (error) {\r\n      console.error('Failed to fetch groups:', error);\r\n    }\r\n  };\r\n\r\n  const setupSocketListeners = () => {\r\n    socketService.onMessageReceived((msg) => {\r\n      const contactId = msg.recipientId || msg.groupId;\r\n      setMessages(prev => ({\r\n        ...prev,\r\n        [contactId]: [...(prev[contactId] || []), formatMessage(msg)]\r\n      }));\r\n    });\r\n\r\n    socketService.onMessageSent((msg) => {\r\n      const contactId = msg.recipientId || msg.groupId;\r\n      setMessages(prev => ({\r\n        ...prev,\r\n        [contactId]: [...(prev[contactId] || []), formatMessage(msg)]\r\n      }));\r\n    });\r\n\r\n    socketService.onMessageStatusUpdate(({ messageId, status }) => {\r\n      setMessages(prev => {\r\n        const updated = { ...prev };\r\n        Object.keys(updated).forEach(contactId => {\r\n          updated[contactId] = updated[contactId].map(msg =>\r\n            msg.id === messageId ? { ...msg, status } : msg\r\n          );\r\n        });\r\n        return updated;\r\n      });\r\n    });\r\n\r\n    socketService.onUserTyping(({ userId, isTyping: typing }) => {\r\n      setIsTyping(prev => ({ ...prev, [userId]: typing }));\r\n    });\r\n\r\n    socketService.onUserStatusChanged(({ userId, isOnline, lastSeen }) => {\r\n      setOnlineUsers(prev => ({ ...prev, [userId]: isOnline }));\r\n      setContacts(prev =>\r\n        prev.map(c => c.id === userId ? { ...c, isOnline, lastSeen } : c)\r\n      );\r\n    });\r\n  };\r\n\r\n  const formatMessage = (msg) => ({\r\n    id: msg._id,\r\n    senderId: msg.senderId,\r\n    recipientId: msg.recipientId,\r\n    groupId: msg.groupId,\r\n    text: msg.text,\r\n    timestamp: msg.timestamp,\r\n    status: msg.status,\r\n    replyTo: msg.replyTo,\r\n    edited: msg.edited,\r\n    deleted: msg.deleted,\r\n    deletedForEveryone: msg.deletedForEveryone\r\n  });\r\n\r\n  const handleAuthSuccess = (user, authToken) => {\r\n    setCurrentUser(user);\r\n    setToken(authToken);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    socketService.disconnect();\r\n    setCurrentUser(null);\r\n    setToken(null);\r\n    setContacts([]);\r\n    setGroups([]);\r\n    setMessages({});\r\n  };\r\n\r\n  const handleSelectContact = async (contact) => {\r\n    setSelectedContact(contact);\r\n    \r\n    // Fetch messages for this contact\r\n    if (!messages[contact.id]) {\r\n      try {\r\n        const endpoint = contact.isGroup \r\n          ? `/messages/group/${contact.id}`\r\n          : `/messages/${contact.id}`;\r\n        const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:5000'}/api${endpoint}`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n        const data = await response.json();\r\n        setMessages(prev => ({\r\n          ...prev,\r\n          [contact.id]: data.map(formatMessage)\r\n        }));\r\n      } catch (error) {\r\n        console.error('Failed to fetch messages:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = (text, replyToId, editId) => {\r\n    if (!selectedContact) return;\r\n\r\n    const messageData = {\r\n      senderId: currentUser.id,\r\n      text,\r\n      replyTo: replyToId\r\n    };\r\n\r\n    if (selectedContact.isGroup) {\r\n      messageData.groupId = selectedContact.id;\r\n    } else {\r\n      messageData.recipientId = selectedContact.id;\r\n    }\r\n\r\n    socketService.sendMessage(messageData);\r\n    \r\n    // Send typing indicator stopped\r\n    if (!selectedContact.isGroup) {\r\n      socketService.sendTypingIndicator(selectedContact.id, currentUser.id, false);\r\n    }\r\n  };\r\n\r\n  const handleAddContact = async (uniqueId) => {\r\n    try {\r\n      await userAPI.addContact(uniqueId);\r\n      await fetchContacts();\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to add contact');\r\n    }\r\n  };\r\n\r\n  const handleCreateGroup = async (name, memberIds) => {\r\n    try {\r\n      await groupAPI.createGroup({ name, members: memberIds });\r\n      await fetchGroups();\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Failed to create group');\r\n    }\r\n  };\r\n\r\n  const handleReply = (message) => {\r\n    setReplyTo(message);\r\n  };\r\n\r\n  const handleEdit = (message) => {\r\n    setEditingMessage(message);\r\n  };\r\n\r\n  const handleDelete = (messageId, deleteForEveryone) => {\r\n    // Implement delete logic with socket\r\n    setMessages(prev => ({\r\n      ...prev,\r\n      [selectedContact.id]: prev[selectedContact.id].map(msg =>\r\n        msg.id === messageId\r\n          ? { ...msg, deleted: true, deletedForEveryone: deleteForEveryone }\r\n          : msg\r\n      )\r\n    }));\r\n  };\r\n\r\n  const allContacts = [...contacts, ...groups];\r\n\r\n  if (!currentUser) {\r\n    return <Auth onAuthSuccess={handleAuthSuccess} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex h-screen bg-gray-100\">\r\n      {showSidebar && (\r\n        <Sidebar\r\n          currentUser={currentUser}\r\n          contacts={allContacts}\r\n          selectedContact={selectedContact}\r\n          onSelectContact={handleSelectContact}\r\n          onLogout={handleLogout}\r\n          onAddContact={() => setShowAddContact(true)}\r\n          onCreateGroup={() => setShowGroupModal(true)}\r\n          onlineUsers={onlineUsers}\r\n        />\r\n      )}\r\n\r\n      <ChatWindow\r\n        selectedContact={selectedContact}\r\n        currentUser={currentUser}\r\n        messages={messages[selectedContact?.id] || []}\r\n        onSendMessage={handleSendMessage}\r\n        onReply={handleReply}\r\n        onEdit={handleEdit}\r\n        onDelete={handleDelete}\r\n        replyTo={replyTo}\r\n        onCancelReply={() => setReplyTo(null)}\r\n        editingMessage={editingMessage}\r\n        onCancelEdit={() => setEditingMessage(null)}\r\n        isTyping={isTyping}\r\n        onlineUsers={onlineUsers}\r\n        onToggleSidebar={() => setShowSidebar(!showSidebar)}\r\n      />\r\n\r\n      <AddContactModal\r\n        show={showAddContact}\r\n        onClose={() => setShowAddContact(false)}\r\n        onAddContact={handleAddContact}\r\n      />\r\n\r\n      <CreateGroupModal\r\n        show={showGroupModal}\r\n        onClose={() => setShowGroupModal(false)}\r\n        onCreateGroup={handleCreateGroup}\r\n        contacts={contacts}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,SAASC,eAAe,EAAEC,gBAAgB,QAAQ,qBAAqB;AACvE,SAASC,OAAO,EAAEC,QAAQ,QAAQ,gBAAgB;AAClD,OAAOC,aAAa,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACoB,MAAM,EAAEC,SAAS,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAAC4B,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAAC8B,OAAO,EAAEC,UAAU,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgC,cAAc,EAAEC,iBAAiB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACkC,cAAc,EAAEC,iBAAiB,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACoC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACd,MAAMuC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,MAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAE/C,IAAIF,WAAW,IAAIG,UAAU,EAAE;MAC7B1B,QAAQ,CAACuB,WAAW,CAAC;MACrBzB,cAAc,CAAC6B,IAAI,CAACC,KAAK,CAACF,UAAU,CAAC,CAAC;IACxC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA1C,SAAS,CAAC,MAAM;IACd,IAAIa,WAAW,IAAIE,KAAK,EAAE;MACxB8B,aAAa,CAAC,CAAC;IACjB;IAEA,OAAO,MAAM;MACX,IAAIrC,aAAa,CAACsC,WAAW,CAAC,CAAC,EAAE;QAC/BtC,aAAa,CAACuC,UAAU,CAAC,CAAC;MAC5B;IACF,CAAC;EACH,CAAC,EAAE,CAAClC,WAAW,EAAEE,KAAK,CAAC,CAAC;EAExB,MAAM8B,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC;IACArC,aAAa,CAACwC,OAAO,CAACnC,WAAW,CAACoC,EAAE,EAAElC,KAAK,CAAC;;IAE5C;IACA,MAAMmC,aAAa,CAAC,CAAC;IACrB,MAAMC,WAAW,CAAC,CAAC;;IAEnB;IACAC,oBAAoB,CAAC,CAAC;EACxB,CAAC;EAED,MAAMF,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAM/C,OAAO,CAACgD,WAAW,CAAC,CAAC;MAC5CpC,WAAW,CAACmC,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,CAAC,KAAK;QAClCR,EAAE,EAAEQ,CAAC,CAACC,GAAG;QACTC,IAAI,EAAEF,CAAC,CAACE,IAAI;QACZC,QAAQ,EAAEH,CAAC,CAACG,QAAQ;QACpBC,QAAQ,EAAEJ,CAAC,CAACI,QAAQ;QACpBC,QAAQ,EAAEL,CAAC,CAACK,QAAQ;QACpBC,OAAO,EAAE;MACX,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAMb,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAM9C,QAAQ,CAAC2D,SAAS,CAAC,CAAC;MAC3C9C,SAAS,CAACiC,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACW,CAAC,KAAK;QAChClB,EAAE,EAAEkB,CAAC,CAACT,GAAG;QACTC,IAAI,EAAEQ,CAAC,CAACR,IAAI;QACZC,QAAQ,EAAEO,CAAC,CAACP,QAAQ;QACpBQ,OAAO,EAAED,CAAC,CAACC,OAAO;QAClBL,OAAO,EAAE;MACX,CAAC,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAMZ,oBAAoB,GAAGA,CAAA,KAAM;IACjC5C,aAAa,CAAC6D,iBAAiB,CAAEC,GAAG,IAAK;MACvC,MAAMC,SAAS,GAAGD,GAAG,CAACE,WAAW,IAAIF,GAAG,CAACG,OAAO;MAChDjD,WAAW,CAACkD,IAAI,KAAK;QACnB,GAAGA,IAAI;QACP,CAACH,SAAS,GAAG,CAAC,IAAIG,IAAI,CAACH,SAAS,CAAC,IAAI,EAAE,CAAC,EAAEI,aAAa,CAACL,GAAG,CAAC;MAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF9D,aAAa,CAACoE,aAAa,CAAEN,GAAG,IAAK;MACnC,MAAMC,SAAS,GAAGD,GAAG,CAACE,WAAW,IAAIF,GAAG,CAACG,OAAO;MAChDjD,WAAW,CAACkD,IAAI,KAAK;QACnB,GAAGA,IAAI;QACP,CAACH,SAAS,GAAG,CAAC,IAAIG,IAAI,CAACH,SAAS,CAAC,IAAI,EAAE,CAAC,EAAEI,aAAa,CAACL,GAAG,CAAC;MAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF9D,aAAa,CAACqE,qBAAqB,CAAC,CAAC;MAAEC,SAAS;MAAEC;IAAO,CAAC,KAAK;MAC7DvD,WAAW,CAACkD,IAAI,IAAI;QAClB,MAAMM,OAAO,GAAG;UAAE,GAAGN;QAAK,CAAC;QAC3BO,MAAM,CAACC,IAAI,CAACF,OAAO,CAAC,CAACG,OAAO,CAACZ,SAAS,IAAI;UACxCS,OAAO,CAACT,SAAS,CAAC,GAAGS,OAAO,CAACT,SAAS,CAAC,CAACf,GAAG,CAACc,GAAG,IAC7CA,GAAG,CAACrB,EAAE,KAAK6B,SAAS,GAAG;YAAE,GAAGR,GAAG;YAAES;UAAO,CAAC,GAAGT,GAC9C,CAAC;QACH,CAAC,CAAC;QACF,OAAOU,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFxE,aAAa,CAAC4E,YAAY,CAAC,CAAC;MAAEC,MAAM;MAAE5D,QAAQ,EAAE6D;IAAO,CAAC,KAAK;MAC3D5D,WAAW,CAACgD,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,CAACW,MAAM,GAAGC;MAAO,CAAC,CAAC,CAAC;IACtD,CAAC,CAAC;IAEF9E,aAAa,CAAC+E,mBAAmB,CAAC,CAAC;MAAEF,MAAM;MAAExB,QAAQ;MAAEC;IAAS,CAAC,KAAK;MACpElC,cAAc,CAAC8C,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,CAACW,MAAM,GAAGxB;MAAS,CAAC,CAAC,CAAC;MACzD3C,WAAW,CAACwD,IAAI,IACdA,IAAI,CAAClB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACR,EAAE,KAAKoC,MAAM,GAAG;QAAE,GAAG5B,CAAC;QAAEI,QAAQ;QAAEC;MAAS,CAAC,GAAGL,CAAC,CAClE,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,MAAMkB,aAAa,GAAIL,GAAG,KAAM;IAC9BrB,EAAE,EAAEqB,GAAG,CAACZ,GAAG;IACX8B,QAAQ,EAAElB,GAAG,CAACkB,QAAQ;IACtBhB,WAAW,EAAEF,GAAG,CAACE,WAAW;IAC5BC,OAAO,EAAEH,GAAG,CAACG,OAAO;IACpBgB,IAAI,EAAEnB,GAAG,CAACmB,IAAI;IACdC,SAAS,EAAEpB,GAAG,CAACoB,SAAS;IACxBX,MAAM,EAAET,GAAG,CAACS,MAAM;IAClBlD,OAAO,EAAEyC,GAAG,CAACzC,OAAO;IACpB8D,MAAM,EAAErB,GAAG,CAACqB,MAAM;IAClBC,OAAO,EAAEtB,GAAG,CAACsB,OAAO;IACpBC,kBAAkB,EAAEvB,GAAG,CAACuB;EAC1B,CAAC,CAAC;EAEF,MAAMC,iBAAiB,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;IAC7ClF,cAAc,CAACiF,IAAI,CAAC;IACpB/E,QAAQ,CAACgF,SAAS,CAAC;EACrB,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzBzD,YAAY,CAAC0D,UAAU,CAAC,OAAO,CAAC;IAChC1D,YAAY,CAAC0D,UAAU,CAAC,MAAM,CAAC;IAC/B1F,aAAa,CAACuC,UAAU,CAAC,CAAC;IAC1BjC,cAAc,CAAC,IAAI,CAAC;IACpBE,QAAQ,CAAC,IAAI,CAAC;IACdE,WAAW,CAAC,EAAE,CAAC;IACfE,SAAS,CAAC,EAAE,CAAC;IACbI,WAAW,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,MAAM2E,mBAAmB,GAAG,MAAOC,OAAO,IAAK;IAC7C9E,kBAAkB,CAAC8E,OAAO,CAAC;;IAE3B;IACA,IAAI,CAAC7E,QAAQ,CAAC6E,OAAO,CAACnD,EAAE,CAAC,EAAE;MACzB,IAAI;QACF,MAAMoD,QAAQ,GAAGD,OAAO,CAACrC,OAAO,GAC5B,mBAAmBqC,OAAO,CAACnD,EAAE,EAAE,GAC/B,aAAamD,OAAO,CAACnD,EAAE,EAAE;QAC7B,MAAMI,QAAQ,GAAG,MAAMiD,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB,OAAOJ,QAAQ,EAAE,EAAE;UACzGK,OAAO,EAAE;YACP,eAAe,EAAE,UAAU3F,KAAK;UAClC;QACF,CAAC,CAAC;QACF,MAAMwC,IAAI,GAAG,MAAMF,QAAQ,CAACsD,IAAI,CAAC,CAAC;QAClCnF,WAAW,CAACkD,IAAI,KAAK;UACnB,GAAGA,IAAI;UACP,CAAC0B,OAAO,CAACnD,EAAE,GAAGM,IAAI,CAACC,GAAG,CAACmB,aAAa;QACtC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,OAAOX,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF;EACF,CAAC;EAED,MAAM4C,iBAAiB,GAAGA,CAACnB,IAAI,EAAEoB,SAAS,EAAEC,MAAM,KAAK;IACrD,IAAI,CAACzF,eAAe,EAAE;IAEtB,MAAM0F,WAAW,GAAG;MAClBvB,QAAQ,EAAE3E,WAAW,CAACoC,EAAE;MACxBwC,IAAI;MACJ5D,OAAO,EAAEgF;IACX,CAAC;IAED,IAAIxF,eAAe,CAAC0C,OAAO,EAAE;MAC3BgD,WAAW,CAACtC,OAAO,GAAGpD,eAAe,CAAC4B,EAAE;IAC1C,CAAC,MAAM;MACL8D,WAAW,CAACvC,WAAW,GAAGnD,eAAe,CAAC4B,EAAE;IAC9C;IAEAzC,aAAa,CAACwG,WAAW,CAACD,WAAW,CAAC;;IAEtC;IACA,IAAI,CAAC1F,eAAe,CAAC0C,OAAO,EAAE;MAC5BvD,aAAa,CAACyG,mBAAmB,CAAC5F,eAAe,CAAC4B,EAAE,EAAEpC,WAAW,CAACoC,EAAE,EAAE,KAAK,CAAC;IAC9E;EACF,CAAC;EAED,MAAMiE,gBAAgB,GAAG,MAAOtD,QAAQ,IAAK;IAC3C,IAAI;MACF,MAAMtD,OAAO,CAAC6G,UAAU,CAACvD,QAAQ,CAAC;MAClC,MAAMV,aAAa,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOc,KAAK,EAAE;MAAA,IAAAoD,eAAA,EAAAC,oBAAA;MACd,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAApD,KAAK,CAACX,QAAQ,cAAA+D,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgB7D,IAAI,cAAA8D,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,uBAAuB,CAAC;IAC3E;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAAA,CAAO7D,IAAI,EAAE8D,SAAS,KAAK;IACnD,IAAI;MACF,MAAMlH,QAAQ,CAACmH,WAAW,CAAC;QAAE/D,IAAI;QAAES,OAAO,EAAEqD;MAAU,CAAC,CAAC;MACxD,MAAMtE,WAAW,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOa,KAAK,EAAE;MAAA,IAAA2D,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAIN,KAAK,CAAC,EAAAK,gBAAA,GAAA3D,KAAK,CAACX,QAAQ,cAAAsE,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBpE,IAAI,cAAAqE,qBAAA,uBAApBA,qBAAA,CAAsBL,OAAO,KAAI,wBAAwB,CAAC;IAC5E;EACF,CAAC;EAED,MAAMM,WAAW,GAAIN,OAAO,IAAK;IAC/BzF,UAAU,CAACyF,OAAO,CAAC;EACrB,CAAC;EAED,MAAMO,UAAU,GAAIP,OAAO,IAAK;IAC9BvF,iBAAiB,CAACuF,OAAO,CAAC;EAC5B,CAAC;EAED,MAAMQ,YAAY,GAAGA,CAACjD,SAAS,EAAEkD,iBAAiB,KAAK;IACrD;IACAxG,WAAW,CAACkD,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP,CAACrD,eAAe,CAAC4B,EAAE,GAAGyB,IAAI,CAACrD,eAAe,CAAC4B,EAAE,CAAC,CAACO,GAAG,CAACc,GAAG,IACpDA,GAAG,CAACrB,EAAE,KAAK6B,SAAS,GAChB;QAAE,GAAGR,GAAG;QAAEsB,OAAO,EAAE,IAAI;QAAEC,kBAAkB,EAAEmC;MAAkB,CAAC,GAChE1D,GACN;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAM2D,WAAW,GAAG,CAAC,GAAGhH,QAAQ,EAAE,GAAGE,MAAM,CAAC;EAE5C,IAAI,CAACN,WAAW,EAAE;IAChB,oBAAOH,OAAA,CAACT,IAAI;MAACiI,aAAa,EAAEpC;IAAkB;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnD;EAEA,oBACE5H,OAAA;IAAK6H,SAAS,EAAC,2BAA2B;IAAAC,QAAA,GACvCnG,WAAW,iBACV3B,OAAA,CAACR,OAAO;MACNW,WAAW,EAAEA,WAAY;MACzBI,QAAQ,EAAEgH,WAAY;MACtB5G,eAAe,EAAEA,eAAgB;MACjCoH,eAAe,EAAEtC,mBAAoB;MACrCuC,QAAQ,EAAEzC,YAAa;MACvB0C,YAAY,EAAEA,CAAA,KAAMzG,iBAAiB,CAAC,IAAI,CAAE;MAC5C0G,aAAa,EAAEA,CAAA,KAAMxG,iBAAiB,CAAC,IAAI,CAAE;MAC7CT,WAAW,EAAEA;IAAY;MAAAwG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CACF,eAED5H,OAAA,CAACP,UAAU;MACTkB,eAAe,EAAEA,eAAgB;MACjCR,WAAW,EAAEA,WAAY;MACzBU,QAAQ,EAAEA,QAAQ,CAACF,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAE4B,EAAE,CAAC,IAAI,EAAG;MAC9C4F,aAAa,EAAEjC,iBAAkB;MACjCkC,OAAO,EAAEjB,WAAY;MACrBkB,MAAM,EAAEjB,UAAW;MACnBkB,QAAQ,EAAEjB,YAAa;MACvBlG,OAAO,EAAEA,OAAQ;MACjBoH,aAAa,EAAEA,CAAA,KAAMnH,UAAU,CAAC,IAAI,CAAE;MACtCC,cAAc,EAAEA,cAAe;MAC/BmH,YAAY,EAAEA,CAAA,KAAMlH,iBAAiB,CAAC,IAAI,CAAE;MAC5CP,QAAQ,EAAEA,QAAS;MACnBE,WAAW,EAAEA,WAAY;MACzBwH,eAAe,EAAEA,CAAA,KAAM7G,cAAc,CAAC,CAACD,WAAW;IAAE;MAAA8F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrD,CAAC,eAEF5H,OAAA,CAACN,eAAe;MACdgJ,IAAI,EAAEnH,cAAe;MACrBoH,OAAO,EAAEA,CAAA,KAAMnH,iBAAiB,CAAC,KAAK,CAAE;MACxCyG,YAAY,EAAEzB;IAAiB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eAEF5H,OAAA,CAACL,gBAAgB;MACf+I,IAAI,EAAEjH,cAAe;MACrBkH,OAAO,EAAEA,CAAA,KAAMjH,iBAAiB,CAAC,KAAK,CAAE;MACxCwG,aAAa,EAAEpB,iBAAkB;MACjCvG,QAAQ,EAAEA;IAAS;MAAAkH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC1H,EAAA,CAnSQD,GAAG;AAAA2I,EAAA,GAAH3I,GAAG;AAqSZ,eAAeA,GAAG;AAAC,IAAA2I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}