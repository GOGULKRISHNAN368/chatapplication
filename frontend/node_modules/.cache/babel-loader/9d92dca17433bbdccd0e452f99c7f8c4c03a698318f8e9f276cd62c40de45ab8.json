{"ast":null,"code":"import io from 'socket.io-client';\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.listeners = new Map();\n  }\n  connect(userId, token) {\n    if (this.socket) {\n      return this.socket;\n    }\n    this.socket = io(SOCKET_URL, {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n    this.socket.on('connect', () => {\n      console.log('✅ Connected to socket server');\n      this.socket.emit('user_online', userId);\n    });\n    this.socket.on('disconnect', () => {\n      console.log('❌ Disconnected from socket server');\n    });\n    this.socket.on('connect_error', error => {\n      console.error('Socket connection error:', error);\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.listeners.clear();\n    }\n  }\n  sendMessage(data) {\n    if (!this.socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    this.socket.emit('send_message', data);\n  }\n\n  // NEW: Edit message\n  editMessage(data) {\n    if (!this.socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    this.socket.emit('edit_message', data);\n  }\n\n  // NEW: Delete message\n  deleteMessage(data) {\n    if (!this.socket) {\n      console.error('Socket not connected');\n      return;\n    }\n    this.socket.emit('delete_message', data);\n  }\n  sendTypingIndicator(recipientId, senderId, isTyping) {\n    if (!this.socket) return;\n    this.socket.emit('typing', {\n      recipientId,\n      senderId,\n      isTyping\n    });\n  }\n  markAsRead(messageIds, senderId, readBy) {\n    if (!this.socket) return;\n    this.socket.emit('message_read', {\n      messageIds,\n      senderId,\n      readBy\n    });\n  }\n  onMessageReceived(callback) {\n    if (!this.socket) return;\n    this.socket.on('message_received', callback);\n    this.listeners.set('message_received', callback);\n  }\n  onMessageSent(callback) {\n    if (!this.socket) return;\n    this.socket.on('message_sent', callback);\n    this.listeners.set('message_sent', callback);\n  }\n  onMessageStatusUpdate(callback) {\n    if (!this.socket) return;\n    this.socket.on('message_status_update', callback);\n    this.listeners.set('message_status_update', callback);\n  }\n\n  // NEW: Listen for message edits\n  onMessageEdited(callback) {\n    if (!this.socket) return;\n    this.socket.on('message_edited', callback);\n    this.listeners.set('message_edited', callback);\n  }\n\n  // NEW: Listen for message deletions\n  onMessageDeleted(callback) {\n    if (!this.socket) return;\n    this.socket.on('message_deleted', callback);\n    this.listeners.set('message_deleted', callback);\n  }\n  onUserTyping(callback) {\n    if (!this.socket) return;\n    this.socket.on('user_typing', callback);\n    this.listeners.set('user_typing', callback);\n  }\n  onUserStatusChanged(callback) {\n    if (!this.socket) return;\n    this.socket.on('user_status_changed', callback);\n    this.listeners.set('user_status_changed', callback);\n  }\n  removeAllListeners() {\n    if (!this.socket) return;\n    this.listeners.forEach((callback, event) => {\n      this.socket.off(event, callback);\n    });\n    this.listeners.clear();\n  }\n  isConnected() {\n    return this.socket && this.socket.connected;\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SOCKET_URL","process","env","REACT_APP_SOCKET_URL","SocketService","constructor","socket","listeners","Map","connect","userId","token","auth","transports","on","console","log","emit","error","disconnect","clear","sendMessage","data","editMessage","deleteMessage","sendTypingIndicator","recipientId","senderId","isTyping","markAsRead","messageIds","readBy","onMessageReceived","callback","set","onMessageSent","onMessageStatusUpdate","onMessageEdited","onMessageDeleted","onUserTyping","onUserStatusChanged","removeAllListeners","forEach","event","off","isConnected","connected"],"sources":["C:/Users/Gogul/OneDrive/Desktop/chat-app/frontend/src/services/socket.js"],"sourcesContent":["import io from 'socket.io-client';\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  connect(userId, token) {\r\n    if (this.socket) {\r\n      return this.socket;\r\n    }\r\n\r\n    this.socket = io(SOCKET_URL, {\r\n      auth: { token: token },\r\n      transports: ['websocket', 'polling']\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('✅ Connected to socket server');\r\n      this.socket.emit('user_online', userId);\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('❌ Disconnected from socket server');\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('Socket connection error:', error);\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.listeners.clear();\r\n    }\r\n  }\r\n\r\n  sendMessage(data) {\r\n    if (!this.socket) {\r\n      console.error('Socket not connected');\r\n      return;\r\n    }\r\n    this.socket.emit('send_message', data);\r\n  }\r\n\r\n  // NEW: Edit message\r\n  editMessage(data) {\r\n    if (!this.socket) {\r\n      console.error('Socket not connected');\r\n      return;\r\n    }\r\n    this.socket.emit('edit_message', data);\r\n  }\r\n\r\n  // NEW: Delete message\r\n  deleteMessage(data) {\r\n    if (!this.socket) {\r\n      console.error('Socket not connected');\r\n      return;\r\n    }\r\n    this.socket.emit('delete_message', data);\r\n  }\r\n\r\n  sendTypingIndicator(recipientId, senderId, isTyping) {\r\n    if (!this.socket) return;\r\n    this.socket.emit('typing', { recipientId, senderId, isTyping });\r\n  }\r\n\r\n  markAsRead(messageIds, senderId, readBy) {\r\n    if (!this.socket) return;\r\n    this.socket.emit('message_read', { messageIds, senderId, readBy });\r\n  }\r\n\r\n  onMessageReceived(callback) {\r\n    if (!this.socket) return;\r\n    this.socket.on('message_received', callback);\r\n    this.listeners.set('message_received', callback);\r\n  }\r\n\r\n  onMessageSent(callback) {\r\n    if (!this.socket) return;\r\n    this.socket.on('message_sent', callback);\r\n    this.listeners.set('message_sent', callback);\r\n  }\r\n\r\n  onMessageStatusUpdate(callback) {\r\n    if (!this.socket) return;\r\n    this.socket.on('message_status_update', callback);\r\n    this.listeners.set('message_status_update', callback);\r\n  }\r\n\r\n  // NEW: Listen for message edits\r\n  onMessageEdited(callback) {\r\n    if (!this.socket) return;\r\n    this.socket.on('message_edited', callback);\r\n    this.listeners.set('message_edited', callback);\r\n  }\r\n\r\n  // NEW: Listen for message deletions\r\n  onMessageDeleted(callback) {\r\n    if (!this.socket) return;\r\n    this.socket.on('message_deleted', callback);\r\n    this.listeners.set('message_deleted', callback);\r\n  }\r\n\r\n  onUserTyping(callback) {\r\n    if (!this.socket) return;\r\n    this.socket.on('user_typing', callback);\r\n    this.listeners.set('user_typing', callback);\r\n  }\r\n\r\n  onUserStatusChanged(callback) {\r\n    if (!this.socket) return;\r\n    this.socket.on('user_status_changed', callback);\r\n    this.listeners.set('user_status_changed', callback);\r\n  }\r\n\r\n  removeAllListeners() {\r\n    if (!this.socket) return;\r\n    this.listeners.forEach((callback, event) => {\r\n      this.socket.off(event, callback);\r\n    });\r\n    this.listeners.clear();\r\n  }\r\n\r\n  isConnected() {\r\n    return this.socket && this.socket.connected;\r\n  }\r\n}\r\n\r\nexport default new SocketService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}